from datetime import datetime

from airflow.models import Variable
from airflow.sensors.base import BaseSensorOperator
from airflow.utils.decorators import apply_defaults
from airflow_providers_tm1.hooks.tm1 import TM1Hook


class CubeUpdateSensor(BaseSensorOperator):
    @apply_defaults
    def __init__(self, tm1_conn_id, cube_name, refresh: bool = False, *args, **kwargs):
        """
        Sensor that waits for a TM1 cube to be updated.
        :param tm1_conn_id: The connection to run the sensor against
        :type tm1_conn_id: str
        :param cube_name: The name of the cube to check for updates
        :type cube_name: str
        :param refresh: If True, the sensor will update the last update flag with the current timestamp
        :type refresh: bool
        """
        if kwargs.get("timeout") is None:
            kwargs["timeout"] = 60
        if kwargs.get("poke_interval") is None:
            kwargs["poke_interval"] = 5
        kwargs["soft_fail"] = True
        kwargs["task_id"] = (
            f'{tm1_conn_id.replace(' ', '')}-{cube_name.replace(' ', '').replace('}', "")}-LastUpdateSensor'
        )
        kwargs["task_display_name"] = f"{tm1_conn_id} {cube_name} Last Update Sensor"
        kwargs["mode"] = "reschedule"
        super(CubeUpdateSensor, self).__init__(*args, **kwargs)
        self.hook = TM1Hook(tm1_conn_id=tm1_conn_id)
        self.conn_id = tm1_conn_id
        self.cube_name = cube_name
        self.refresh = refresh

    def poke(self, context):
        with self.hook.get_conn() as tm1:
            variable_name = f"{self.conn_id}.{self.cube_name}.last_update"
            last_flag = Variable.get(variable_name, default_var=None)
            last_update = tm1.cubes.get_last_data_update(self.cube_name)

            # Log the updates for debugging purposes
            self.log.info(f"Last update flag: {last_flag}")
            self.log.info(f"Last update: {last_update}")

            # Update the variable with the new last update timestamp
            if last_update != last_flag and self.refresh:
                Variable.set(
                    variable_name,
                    last_update,
                    description=f"The cube last update timestamp flag for {self.conn_id}.{self.cube_name}, auto generated by Airflow",
                )

            # Return True if the last update is different from the last flag
            return last_update != last_flag
